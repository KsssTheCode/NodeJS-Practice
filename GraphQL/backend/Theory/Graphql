GraphQL 사용에 필요한 패키지 
1. graphql : 스키마를 정의하는데 필요한 패키지로 query, mutation, subscription등의 정의를 허용
2. express-graphql : 서버가 들어오는 요청등을 분석하도록 함

GraphQL의 내장 유형
- 문자열 (String)
- 정수형 (Integer)
- 부동 소수점
- Boolean
- ID
등등... (이 외의 유형은 공식문서 참조)

GraphQL의 특징
- 프론트엔드와 백엔드를 독립적으로 사용
- 클라이언트에 한 쪽 엔드포인트만 노출시킨다는 것 : 프론트엔드 application(React.js)에 제한되지 않음
- REST API보다 동적 데이터 요구조건이 많을 때 유용함 
  (REST API의 경우, 매우 분명하고 구조적이고 명시적인 방식으로,
   파일업로드, 동일한 종류의 데이터 같이 유연성이 필요없는 시나리오에서 장점을 발휘함)
- 언어나 프레임워크에 상관없이 적용 가능
- 실행과정
    1. /graphql을 통한 POST요청
    2. 실행하고자하는 쿼리나 뮤테이션을 설명하기위해 graphqlQuery변수를 통해 해당 쿼리 표현을 분석 
    3. 적절한 resolver를 호출하여 작성된 논리 실행 
    4. 결과로 나온 데이터 반환하거나 조작 진행

스키마에 정의된 각 쿼리나 뮤테이션에 메소드가 필요함
스키마, 쿼리, 뮤테이션은 schema.js파일에, 메소드는 resolver.js파일에 작성함
schema.js의 쿼리명과 resolver.js의 메소드명은 동일해야함

쿼리와 뮤테이션의 구성들을 이용하여 데이터를 교환 및 관리함
쿼리의 경우 REST API에서의 GET요청 
뮤테이션의 경우 REST API에서의 POST, PUT, PATCH, DELETE요청

App.js

graphqlHttp({
    schema: 스키마파일
    rootValue: resolver파일
});

'/graphql' url을 활성화하게되면 GraphiQL페이지로 이동가능하게되고, 테스트와 생성이 가능함

GraphQL의 에러핸들러
app.js파일의 graphql미들웨어 확인!

GraphQL은 POST요청이 아닌 다른 요청(Options, get, delete, ...)은 거절함

이미지나 파일을 가지고 오기위해서는 패키지를 사용해야함
가장 깔끔한 방법은 이미지를 보낼 REST 엔드 포인트같은 전형적인 엔드 포인트를 이용하여, 해당 엔드포인트가 이미지를 저장하고 경로를 반환하게 하는 것. 그리고 이미지에 대한 경로로 또 다른 요청을 보내고 나머지 데이터는 GraphQL엔드 포인트에 요청하는 코드를 app.js파일에 구현

프론트엔드에서 쿼리실행 시, ${}을 이용해 직접적으로 동적인 값을 주입할 수 있지만, 
변수객체를 query에 추가해줌에따라 자동으로 사용될 변수가 무엇인지를 인식할 수 있도록 할 수 있음
(dollar sign($)이 동적인 값을 의미함)
ex) front > feed.js > componentDidmMount query상수