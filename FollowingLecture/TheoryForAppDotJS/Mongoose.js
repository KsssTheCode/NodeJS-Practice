/*
    Mongoose는 내부에서 접속을 관리하기 때문에 
    설치 후, app.js에서 호출하는 것만으로도 사용이 가능
    (별다른 util파일이 필요가 없음)

    Mongoose도 MongoDB와 동일하게 Schemaless라는 특징을 갖고있지만, 
    사용자의 데이터가 어떻게 생겼는지 확인하기 위해 Schema를 정의하도록하며
    사용자가 데이터에만 집중할 수 있도록하고, 꼭 필요한 정보에 대한 강제성을 부여해주기도 함.
    (Schema를 정의하는 것이 반드시 필요한 과정은 아님)
*/

/* mongoose.connect('서버url') *********
    - 서버와 연결하는 메소드
**************************************/
/* mongoose.model('사용할이름', 스키마로정의된객체명) *******************
    - Mongoose가 배후에서 '객체' 스키마에 연결하는 것을 돕도록 함
    - 해당 객체를 사용할 이름, 스키마로 정의한 객체명
****************************************************************/
/* .cursor() ****************************************
    - 호출한 데이터의 양이 많을 때, 데이터의 수를 제한할 수 있음
*****************************************************/
/* mongoose.fundById('아이디') **********
***************************************/
/* populate() *****************************************************
    - find()뒤에서 사용하며, fid로 찾은 객체를 add해주는 Mongoose 내장 메소드
    -> 데이터를 가져올 때, 중첩된 쿼리를 사용하지 않고 간편하게 가지고 올 수 있음
    - 매개변수로는 채우고자하는 경로를 입력
*******************************************************************/
/* select() *****************************************************
    - find()뒤에서 사용하며, 선택(제외)할 필드를 DB에서 호출
    -> 데이터를 가져올 때, 중첩된 쿼리를 사용하지 않고 간편하게 가지고 올 수 있음
    - 매개변수로는 채우고자하는 필드를 입력 (제외할 필드는 앞에 -입력)
      (ex: title과  price만 => select('title price -_id -description'))
*******************************************************************/
/* Schema.methods.메소드명 ***************************
    - methods : 독자적인 메소드를 추가할 수 있게 하는 객체
***************************************************/
/* save() ************************************
    - 생성된 객체를 DB에 push 후 저장해주는 내장 메소드 
**********************************************/
