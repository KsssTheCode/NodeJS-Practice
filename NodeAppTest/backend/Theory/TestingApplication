Mocha는 테스트를 실행하고 테스트 코드를 정의하는 it(), describe()함수를 제공함 (describe()는 테스트 함수를 묶어주어 원하는 만큼 중첩시킬 수 있음)
Chai는 성공조건을 정의하는 역할을 함 (Should, Expect, Assert)(should와 expect 모두 성공조건을 정의하는 것은 같지만 테스트 조건을 작성하는 방법에는 차이가 있음)

테스트 시에 다수의 성공 조건 또는 다수의 예상을 할 수 있고, 또한 해당 테스트에 필요한 추가적인 설정도 정의할 수 있음

테스트 시에는 내가 작성한 논리의 코드에 대해서만 검사해야하고, 제3자 패키지의 메소드나 설정을 테스트해서는 안됨 
ex)jwt의 verify()는 불가하지만, 전달받은 값을 사용하는 decodedToken에 대한 검사는 가능
이럴 때, sinon패키지의 stub를 이용하여 검사불가한 메소드를 임의로 바꾸어 실행한 후, 복원시키는 방법을 사용

DB운영이 도입된 코드들을 테스트하기 위한 방법
1. 실제로 DB엑세스에 의존하는 부분들을 stub()로 실행한 후 restore()로 복구시킴
   : 예를들어 findOne()을 실행할 떄, 사전 정의된 결과를 반환하는 stub를 생성하며 이후 코드가 잘 작동하는지 테스트
                                오류가 발생했을 때 우리의 코드가 어떻게 작동하지는 알아내 오류를 비교
                                (만약, 한 메소드의 오류가 여러가지 발생할 수 있다면 statusCode비교)
   : 실제 DB에 접근하지 않아 DB에 영향을 주지 않고, 속도가 빠르다는 장점

2. 테스트만을 위한 데이터베이스 사용
   : 테스트 속도가 느리지만, 현실적인 테스트 환경을 가질 수 있어 유닛(미들웨어)테스트 뿐만 아니라 통합테스트도 가능케 함수를

*만약 테스트 중 timeout으로 인해 실패한다는 메세지가 나오면 package.json파일의 scripts > test > "mocha --timeout 밀리세컨" 형식으로 변경해주면 됨


Aysnc구문의 경우 Mocha는 비동기구문이 완료될 떄까지 기다리지 않고 그대로 실행함
Mocha에서는 해당 테스트가 끝난 뒤, 호출할 수 있는 함수를 제공하는데,
이를 해결하기 위해 우리가 전달하는 함수에 인수를 추가로 전달하면됨 (function(done) : 호출을 기다리도록 함)
+ done() 사용 시, 테스트가 완료되었다면 Ctrl+C로 종료시켜야하는데, 이는 Mocha가 이벤트 루프에 실행 중인 프로세스가 있다고 감지했기때문
따라서, DB와 연결을 시켰다면 테스트 종료 시 연결을 끊어주는 메소드에 then블록으로 done()을 실행해야 함

<훅>
describe()로 내부에서 before()함수로 전체 테스트 전에 실행할 수 있음
                   beforeEach()함수로 각 테스트(모든 it()) 전에 실행할 수 있음 (재설정, 초기화설정에 유용)
                   after()함수로 전체 테스트가 끝난 후에 실행할 수 있음
                   afterEach()함수를 각 테스트(모든 it())가 끝난 후에 실행할 수 있음 (재설정, 초기화설정에 유용)

