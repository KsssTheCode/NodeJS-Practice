RE presentational
S  tate
T  ransfer

: 사용자 인터페이스 대신 전송받은 데이터만을 이용

* HTTP methods
    - GET : 서버로부터 데이터를 가지고만 올 때
    - POST : 첨부한 데이터를 바탕으로 서버에서 데이터를 가지고 올 때 (overwrite X)
    - PUT : 서버에 데이터를 넣을 때 (create, overwrite, ..)
    - PATCH : 서버에 일부 데이터를 업데이트할 때
    - DELETE : 서버에 있는 데이터를 삭제할 때
    - OPTIONS : 브라우저가 자동으로 보내는 메소드로 다음 요청을 허용할 지 여부를 알아볼 때

    - 코드를 실행하기 위해 사용된 위 메소드들은 코드가 실행하는 작업을 제한하지 않음
      따라서, 스스로 제한하고 REST API를 실행해야함

* REST API 구축 시의 2가지 핵심 개념
  * - Uniform Interface : 일관된 인터페이스
                        : API에 명확하게 정의된 API엔드포인트를 가져야함
                          (엔드포인트 : 명확하게 정의된 요청 및 응답 데이터 구조를 가진 http메소드 및 경로의 조합)
                         => API는 예측가능해야하고, 공개된 경우에는 문서화가 잘 되어있어야 함
  * - State Interaction : 무상태 상호작용 원칙 (인증에 있어 매우 중요한 개념)
                        : 서버와 클라이언트는 완벽하게 분리된 상태로 따로 작동하며, 데이터만 주고받아야함
                          => 새로운 엔드포인트를 설정할 때마다 이전 요청과 독립적으로 기능하는지 확인해야함
                        : 클라이언트와 서버는 완전히 분리되어 히스토리를 공유하지 않음
                          (연결 히스토리가 저장되지 않고 들어오는 모든 요청에 대해 사전 요청을 보내지 않는 것으로 처리하므로 어떤 세션도 사용하지 않음)
                          =>  서버가 각 요청을 직접 들여다봐야하고, 개별 클라이언트에 신경쓰지 않아야함 (클라이언트를 위한 세션을 저장하지 않음)
    - Cacheable : 캐싱 가능 원칙
                : REST API에서 헤더를 전송해 클라이언트에게 응답의 유효기간을 알려줌으로써 클라이언트가 응답을 캐싱할 수 있도로함
    - Client/Server : 클라이언트와 서버 간의 분리 (데이터 저장관련하여 클라이언트는 신경 쓸 필요가 없음)
    - Layered System : 계층형 시스템
                     : 클라이언트가 API에 요청을 보낼 때, 해당 요청을 받은 서버가 요청을 즉시 처리하는 대신 다른 서버로 전달하거나 분배할 수 있음
    - Code on Demand : 주문형 코드
                     : 엔트포인트에서 실행 가능한 코드를 전송할 수도 있음 
                          