/* 세션과 쿠기가 설정되는 방식 **************************************************
    - app.use(session()), 즉 구성해둔 express 세션의 미들웨어에 의해 자동으로 이루어짐
    - 미들웨어가 자동으로 쿠키를 설정하면서 쿠키의 값도 자동으로 읽어줌
    => 즉, 미들웨가 모든 쿠키의 분석과 설정을 실행해줌
**************************************************************************/ 
/* 쿠키 *******************************************************************************************
 * 쿠키의 기능
    - Expires,Max-age : 쿠키의 유효기간 설정 (ms단위)
    - Domain : 쿠키를 전송할 도메인
    - Secure : Https와 함께 제공될때만 쿠키 사용 기능하도록 함
    - HttpOnly : 클라이언트 측 JavaScript코드(브라우저)로 쿠키값에 접근할 수 없도록함 (Cross-site-scripting공격의 보안법)
    - 활성유지기간, 승인, 경로(쿠키를 전송할 요청경로)등과 함께 활용가능

 * 쿠키는 사용자 서로가 볼 수 없지만, 조작이 가능하다는 취약점을 가지고 있다는 점과
   브라우저를 닫았다가 열어도 해당 쿠키가 존재한다는 점떄문에 session cookie를 활용함

 * 헤더에 쿠키를 저장하는 방식으로 사용하기때문에 
   res.setHeader('Set-Cookie', '키=밸류; 키-밸류; 속성-속성값;...') 형식으로 생성함
*************************************************************************************************/
/* Session *****************************************************************************************
 * Session의 특징
    - 쿠키와 다르게 Front-end가 아닌 Server측에 인증정보를 저장해둠
    - 사용하기 위해서는 클라이언트는 서버에게 자신이 소속된 세션을 알려야 함 
        (최종적으로 세션은 단순히 메모리나 DB에 저장된 입력값이 불과하기때문)
    - 세션의 ID(특정 알고리즘으로 해시처리된 ID)를 저장하는 쿠키를 활용하는 방식
        (유지가 어렵고 위조도 가능해 민감정보는 저장하지 않기때문, 변경도 가능)
        따라서, 저장된 쿠키 값이 DB의 특정 ID와 관련되었다는 것을 서버에서만 확인할 수 있도록 암호화된 방식으로 ID를 저장
        (변경할 수는 있지만, 다른 세션으로는 확인할 수 없게 됨)

 * Session 사용방법
    - npm install --save express-session으로 패키지 등록 후 사용 (express.js모음의 일부이지만 내장되진 않음)
    - 메인 프로그램파일(app.js)에서 서버를 시작하는 시점에 초기화하고, 
      최소한의 세션 미들웨어 사용 전에 초기화해줌으로써 들어오는 모든 요청에 대해 세션사용이 가능하도록 함 (위치주의)
    - app.use(session({}))과 같은 형식으로 session메소드에 세션 설정을 구성하는 JS객체 전달
      _코어 속성
      secret: '아무텍스트' -> ID를 비밀리에 쿠키에 저장하는 해시를 등록할 떄 사용 (실무에서는 랜덤값을 긴 문자열)
      resave: false -> 세션이 완료(전송)되는 모든 요청이 아니라, 세션이 변경되었을 때만 저장
      saveUninitialized: false -> 저장할 필요가 없는 요청의 경우 변경된 내용이 없으므로 저장되지 않도록 함
      cookie : {Max-age: ~~,....} -> 세션 쿠키 구성

 * Session Cookie
    - 세션 쿠키는 검색하고 있는 장소(사용자, 해당 웹사이트의 실행 인스턴스)를 식별 
    - 서버 측의 세션을 식별하는 쿠키는 브라우저가 종료되도 세션의 쿠키는 사라지지 않음 ???
    - 서버 측의 세션은 종종 승인을 위해 사용됨

 * Session Store
    - 메모리스토어보다 안전하고 제약도 작음
    - 단일 유저에만 집중하여 사용자 전반에 데이터를 공유하지 않음

 * Session을 DB에 저장하는 방법
    - Github의 expressjs문서에서 Session Store목록에서 사용하는 DB에 맞게 선택하여 다운로드
    -> app.js에서 스토어 구성 (다운도르한 파일을 임포트한 후 설정)
    -> session설정에서 설정된 변수를 store속성에 추가 
***************************************************************************************************/