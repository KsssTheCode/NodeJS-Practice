* TypeScript란?
  : JavaScript의 Superset으로 JS에 기반해 확장된 언어
    => JS코드도 그대로 돌아감 (모든 JS코드를 지원)
  : JS와 달리 블라우저에서 실행되지 않고, JS에 컴파일해 실행됨
    => js파일에 오류가 없더라도, ts파일에 나타나는 오류도 나타냄 
    (실행하기위해서는 TypeScript를 JavaScript로 전환해야함)
    (Deno의 경우 내장되어 있음)


* TypeScript를 사용하는 이유
  - 코드에 개발 중에만 존재하는 몇 가지 기능 추가하여 더 나은 코드를 작성하고 원치 않는 오류를 방지하는데 도움을 줌

* TypeScript 기능 예시
  - 데이터유형을 설정
  - 개발 중에 버그를 잡아내 제거하도록 도움 => 코드를 개선하고 버그를 줄여줌
  - 일부의 다음 세대 JS기능을 잠금 해제하여 Babel같은 추가적인 도구 없이도 코드에 사용할 수 있게해줌
  - JS에 존재하지 않는 기능도 추가하여 코드를 더 간결하게 해줌 (단, JS를 컴파일 한 이후에는 제거됨)
  - 메타프로그래밍 기능을 추가하여 Decorators같은 추가적인 기능을 사용하게 해줌
  - 개발자가 코드 컴파일 방식을 미세하게 조정할 수 있도록 하여 다양한 구성 옵션을 제공함
  - 최신 도구들을 많이 제공하여 결합할 수 있게하여 훌륭한 개발 경험 제공

* TypeScript 컴파일러 설치 (TS -> JS 전환)
1. (맥,Linux의 경우)sudo npm install -g typescript 실행 (노드JS의 경우 최신버전으로 업데이트)
2. tsc app.ts 실행 (실행하게되면 app.js가 생성됨) (Deno사용 시, 배후에서 생성되고 저장되기 때문에 app.js파일이 생성되지 않음)
3. index파일에 script구문을 추가한 후 body전체를 분석한 후메나 실행되도록 함 (src='app.js' defer)

* TypeScript의 Types
  - number : 음수, 실수 모두 포함
  - string : '', "", `` 내부의 값
  - boolean : true, false
  - obejct : 보통 객체유형인지, 객체가 어떻게 보일지 속성을 구체적으로 설정 가능
  - Array : 아무 컨텐츠나 가능할지, 숫자만 가능할지 설정 가능
  - Union : 하나 이상의 유형을 가진 데이터타입, ' | '를 사용하여 표현

  - type : 커스텀한 데이터타입
         : type 타입명 = 타입1 | 타입2 | 타입3 | ... 과 같이 설정해둔 후 타입명 그대로 사용가능 (Object, Array모두 가능)
  - interface : 메소드 구현을 위해 클래스를 강제지정할 수 있음

  - Generic : 단순히 다른 유형과 상호작용하는 유형 ( '<데이터타입>' )
              (ex: Array타입 - 데이터 목록이라는 핵심 유형이면서(OuterType:Array), 배열 내부(InnerType)에 존재하는 데이터의 유형과도 상호작용)
            : Array타입, Promise타입 등에서 사용가능하지만, 지원하는 객체이어야 함

* 'type','interface'의 차이
  : 두 타입 모두 단순한 객체의 구조를 정의하는 경우 사용가능 (이 경우, interface를 주로 사용)
  : interface는 특정 메소드(기능)을 구현하기 위해 클래스를 강제 지정하기 위해서도 사용
    => Date타입과 같이 클래스 이름을 interface타입의 데이터타입으로 사용할 수 있음 
       (new XXX로 사용하여 인스턴스화를 거쳐서도 사용가능 )

  ....

* TypeScript설정파일(tsconfig.json)
 - tsc --init 실행하면 tsconfig.json파일이 자동으로 생성됨
 - 'tsc app.js'를 실행하면 해당 파일(app.js)만 실행되지만, (tsconfig.json파일 등 폴더 내 다른 파일 생략)
   'tsc'를 실행하면 모든 유형을 파일을 폴더에 컴파일하게 됨 (tsconfig.json파일 포함 파일 내 모든 파일 함께 컴파일)
   하지만, IDE를 사용한다면 반드시 tsconfig.json파일을 함께 선택함
 - tsconfig.json파일의 TypeChecking > "strict": true
    : 아래 속성들은 주석처리되어있는데 반해 strict속성은 default값으로 설정되어 있음
    : "strict"속성은 보통 TS에서 허용된 것을 허용하지 않는다는 뜻으로 값을 true로 설정하게되면 아래 기능들이 모두 true로 설정됨
     (strict속성을 주석처리하고 아래 기능들을 선택하여 사용도 가능)
    
    : 변수를 설정할 때, 데이터타입을 ': 데이터타입'으로 명시해주지 않으면, any타입이라는 오류를 발생시키게 되는데,
      "strict"속성이 true로 엄격모드인 상태에서는 인수에 입력을 잊는 것으로 간주됨
      만약, 데이터타입을 모르거나 모든 값을 허용한다면 ': any'로 데이터타입에 대한 정보가 없음을 명시해야함
      (입력값에 대해 조금이라도 유추가 가능하다면 어느정도는 설정해주는 것이 좋음)

* ' ! '
  - 기본적으로 TS는 요소를 불러올 때, HTML파일을 검사하지 않기때문에 존재하는 값인지 아닌지 알지 못하기 때문에
    실행되기어 html파일을 읽기 전까지는 null로 표시함
    따라서, 해당 요소에 대해 2가지 방법을 취할 수 있는데,
    1) if문으로 해당 요소의 존재를 확인하는 방법
    2) '!'를 붙여 느낌표 앞의 문장 혹은 표현이 null인 경우 무시하도록하고 다른 값을 가지도록 함 **