* require문 
    require문은 Node코드를 실행할 때만 사용할 수 있으므로, 브라우저에서 실행하려고 한다면 존재하지 않게됨
    IDE에 내장된 TypeScript는 이 코드를 어디서 실행할지를 모른다는 것을 탐지함
    따라서, TypeScript가 이 코드를 탐지할 수 있도록 npm i --save-dev @types/node 실행

* @types
    npm에는 다양한 종류의 @types 패키지가 존재함
    이 패키지들은 JS기능에 대한 TS로의 변역만을 제공할 뿐, 코드를 TypeScript코드로 재장성하진 않음
    이들은 TypeScript로 하여금 특정 라이브러리, 특정 패키지 또는 특정 명령어를 이해하게하는 코드를 포함하고 있음

    추가적으로 특정 패키지를 설치하게되면 특정 패키지에서 지원하는 오류표시, 확장자생략, import/export 등의 기능을 사용할 수 있음
    단, tsconfig.json파일에서 TypeScript에서의 오류예측을 가능케 설정을 변경해주어야 함
       (Module > "moduleResolution": "node"으로 설정)
    
    ex: npm i --save-dev @types/node (Node)
        npm i --save-dev @types/express (Express)

* 자동생성되는 JS파일과 TS파일을 따로 모아두는 방법
  - 사용하는 이유 : 입력을 담당하는 소스폴더(src)와 출력을 담당하는 소스폴더(dist)로 나누어 입출력을 분명히 나눌 수 있음

  - TS
    tsconfig.json파일의 "rootDir"구성의 주석을 풀어주고 "rootDir": "./src"같은 형식으로 저장될 파일경로를 지정해줌(존재하지않는 폴더라도 알아서 생성함)
    생성된 src폴더는 작업 시에 TypeScript구문들을 사용한 파일들이고, 실행 시에('tsc') 자동으로 컴파일된 JS파일들을 생성함

  - JS
    tsconfig.json파일의 "outDir"구성의 주석을 풀어주고 "outDir": "./dist"같은 형식으로 저장될 파일경로를 지정해줌(존재하지않는 폴더라도 알아서 생성함)
    생성된 dist폴더가 완성된 노드앱을 가지며 Node앱을 EXE(executable)로 실행할 수 있음 (TS를 JS로 컴파일한 파일들이기때문에 실행 가능한 코드들임)
  
